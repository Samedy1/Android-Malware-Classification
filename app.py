from flask import Flask,request, url_for, redirect, render_template
import pickle
import numpy as np
import pandas as pd
import ipaddress
from datetime import datetime, timedelta
from sklearn.preprocessing import MinMaxScaler

app = Flask(__name__)

model=pickle.load(open('model.pkl','rb'))


@app.route('/')
def hello_world():
    return render_template("android_malware.html")

@app.route('/predict',methods=['POST','GET'])
def predict():
    keys = [x for x in request.form.keys()]
    values = [x for x in request.form.values()]
    data = pd.DataFrame([values], columns=keys)

    print(f'keys: {keys}')
    print(f'values: {values}')
    print(f'data: {data}')

    data['Source IP'] = data['Source IP'].apply(lambda x : int(ipaddress.IPv4Address(x)))
    data['Destination IP'] = data['Destination IP'].apply(lambda x : int(ipaddress.IPv4Address(x)))
    data['Timestamp'] = data['Timestamp'].apply(to_second)

    print(f'data: {data}')

    scaler = MinMaxScaler()
    scaled_val = scaler.fit_transform(data)
    scaled_val = pd.DataFrame(scaled_val, columns=scaler.get_feature_names_out())
    print(f'scaled_val: {scaled_val}')


    prediction=model.predict(scaled_val)
    print(f'output: {prediction}')

    types = ['Android Adware', 'Android SMS Malware', 'Android Scareware','Benign']
    if prediction[0] == 0:
        return render_template('android_malware.html',pred=f'Type: {types[0]}')
    elif prediction[0] == 1:
        return render_template('android_malware.html',pred=f'Type: {types[1]}')
    elif prediction[0] == 2:
        return render_template('android_malware.html',pred=f'Type: {types[2]}')
    elif prediction[0] == 3:
        return render_template('android_malware.html',pred=f'Type: {types[3]}')
    
def to_second(t):
    time_str = t
    time_format = '%H:%M:%S'

    time_obj = datetime.strptime(time_str, time_format).time()
    
    total_seconds = timedelta(
        hours=time_obj.hour,
        minutes=time_obj.minute,
        seconds=time_obj.second,
    ).total_seconds()

    return total_seconds


if __name__ == '__main__':
    app.run(debug=True)
